package de.unima.ki.pmmc.evaluator.handler;

import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.function.Consumer;

import de.unima.ki.pmmc.evaluator.matcher.Result;
/**
 * A <code>ResultHandler</code> is responsible for processing collections
 * of <code>Result</code> instances which are generated by the <code>Evaluator</code>.
 * For example, a <code>Result</code> could be written to specific format like JSON or XML, 
 * but also written into database.
 */
public interface ResultHandler {

	/**
	 * Called before generated <code>Result</code>s
	 * are shipped to this handler. If a <code>ResultHandler</code>
	 * uses the file system or database connection, establish
	 * and open the corresponding streams.
	 * @throws IOException 
	 */
	public void open() throws IOException;
	
	/**
	 * Called for each applied threshold with the corresponding
	 * <code>Result</code> list.
	 * @param results
	 */
	public void receive(List<Result> results);
	
	/**
	 * Called after all receive-operations are finished and
	 * all <code>Result</code>s were shipped to the
	 * <code>ResultHandler</code>. For example, used to close database
	 * connections and file system streams.
	 */
	public void close() throws IOException;
	
	/**
	 * Listener that can be used for logging.
	 * @param listener the listener used for logging
	 */
	public void setFlowListener(Consumer<String> listener);
	
	/**
	 * Output path for the currently processed <code>Result</code>
	 * collection.
	 * @param path the current output path
	 */
	public void setOutputPath(Path path);
	
	/**
	 * Mapping information for the currently processed <code>Result</code>
	 * collection.
	 * @param info the mapping information
	 */
	public void setMappingInfo(String info);
}
